/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#[link(name = "js",
       vers = "0.1")];
#[crate_type = "lib"];

#[allow(non_uppercase_statics)];

extern mod extra;

use std::libc;
use std::cast;
use std::ptr;
use std::ptr::null;
use std::result::{Result, Ok, Err};
use std::libc::c_uint;
use jsapi::{JSBool, JSContext,
            JSObject, JSVal, jsid,
            JSProto_LIMIT};
use jsapi::JS_ComputeThis;
use std::libc::types::common::c99::uint32_t;
pub use jsval::{JSVAL_TO_OBJECT, JSVAL_IS_PRIMITIVE, JSVAL_IS_OBJECT};
use rust::jsobj;
pub use name_pool::NamePool;

// These are just macros in jsapi.h
pub use JS_NewRuntime = jsapi::JS_Init;
pub use JS_DestroyRuntime = jsapi::JS_Finish;
/*
FIXME: Not sure where JS_Lock is
pub use JS_LockRuntime = jsapi::bindgen::JS_Lock;
pub use JS_UnlockRuntime = jsapi::bindgen::JS_Unlock;
*/

pub use jsfriendapi::JSJitInfo;

pub mod jsapi;
pub mod linkhack;
pub mod name_pool;
pub mod rust;
pub mod global;
pub mod glue;
pub mod crust;
pub mod jsval;
pub mod jsfriendapi;

// FIXME: Add the remaining options
pub static JSOPTION_STRICT: uint32_t =    0b00000000000001u32;
pub static JSOPTION_WERROR: uint32_t =    0b00000000000010u32;
pub static JSOPTION_VAROBJFIX: uint32_t = 0b00000000000100u32;
pub static JSOPTION_METHODJIT: uint32_t = (1 << 14) as u32;
pub static JSOPTION_TYPE_INFERENCE: uint32_t = (1 << 18) as u32;

pub static default_heapsize: u32 = 8_u32 * 1024_u32 * 1024_u32;
pub static default_stacksize: uint = 8192u;
pub static ERR: JSBool = 0_i32;

pub static JSVAL_TAG_MAX_DOUBLE: u64 = 0x1FFF0;

pub static JSVAL_TYPE_DOUBLE: u64 = 0x00;
pub static JSVAL_TYPE_INT32: u64 = 0x01;
pub static JSVAL_TYPE_UNDEFINED: u64 = 0x02;
pub static JSVAL_TYPE_BOOLEAN: u64 = 0x03;
pub static JSVAL_TYPE_MAGIC: u64 = 0x04;
pub static JSVAL_TYPE_STRING: u64 = 0x05;
pub static JSVAL_TYPE_NULL: u64 = 0x06;
pub static JSVAL_TYPE_OBJECT: u64 = 0x07;
pub static JSVAL_TYPE_UNKNOWN: u64 = 0x20;

pub static JSVAL_TAG_SHIFT: int = 47;

//The following constants are totally broken on non-64bit platforms.
//See jsapi.h for the proper macro definitions.
pub static JSVAL_VOID: JSVal = JSVal {
    v: (JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_UNDEFINED) << JSVAL_TAG_SHIFT
};
pub static JSVAL_NULL: JSVal = JSVal {
    v: (JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_NULL) << JSVAL_TAG_SHIFT
};
pub static JSVAL_ZERO: JSVal = JSVal {
    v: (JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_INT32) << JSVAL_TAG_SHIFT
};
pub static JSVAL_ONE: JSVal = JSVal {
    v: ((JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_INT32) << JSVAL_TAG_SHIFT) | 1
};
pub static JSVAL_FALSE: JSVal = JSVal {
    v: (JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_BOOLEAN) << JSVAL_TAG_SHIFT
};
pub static JSVAL_TRUE: JSVal = JSVal {
    v: ((JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_BOOLEAN) << JSVAL_TAG_SHIFT) | 1
};

pub static JSID_TYPE_STRING: i64 = 0;
pub static JSID_TYPE_INT: i64 = 1;
pub static JSID_TYPE_VOID: i64 = 2;
pub static JSID_TYPE_OBJECT: i64 = 4;
pub static JSID_TYPE_DEFAULT_XML_NAMESPACE: i64 = 6;
pub static JSID_TYPE_MASK: i64 = 7;

pub static JSID_VOID: jsid = JSID_TYPE_VOID as jsid;

pub static JSFUN_CONSTRUCTOR: u32 = 0x200; /* native that can be called as a ctor */

pub static JSPROP_ENUMERATE: c_uint = 0x01;
pub static JSPROP_READONLY: c_uint  = 0x02;
pub static JSPROP_PERMANENT: c_uint = 0x04;
pub static JSPROP_GETTER: c_uint = 0x10;
pub static JSPROP_SETTER: c_uint = 0x20;
pub static JSPROP_SHARED: c_uint =    0x40;
pub static JSPROP_NATIVE_ACCESSORS: c_uint = 0x08;

pub static JSCLASS_RESERVED_SLOTS_SHIFT: c_uint = 8;
pub static JSCLASS_RESERVED_SLOTS_WIDTH: c_uint = 8;
pub static JSCLASS_RESERVED_SLOTS_MASK: c_uint = ((1 << JSCLASS_RESERVED_SLOTS_WIDTH) - 1);

pub static JSCLASS_HIGH_FLAGS_SHIFT: c_uint =
    JSCLASS_RESERVED_SLOTS_SHIFT + JSCLASS_RESERVED_SLOTS_WIDTH;
pub static JSCLASS_IS_GLOBAL: c_uint = (1<<(JSCLASS_HIGH_FLAGS_SHIFT+1));

pub static JSCLASS_GLOBAL_SLOT_COUNT: c_uint = JSProto_LIMIT * 3 + 24;

pub static JSCLASS_IS_DOMJSCLASS: u32 = 1 << 4;
pub static JSCLASS_USERBIT1: u32 = 1 << 7;

pub static JSSLOT_PROXY_PRIVATE: u32 = 1;

pub static JSRESOLVE_QUALIFIED: u32 = 0x01;
pub static JSRESOLVE_ASSIGNING: u32 = 0x02;
pub static JSRESOLVE_DETECTING: u32 = 0x04;

pub enum JSGCTraceKind {
    JSTRACE_OBJECT,
    JSTRACE_STRING,
    JSTRACE_SCRIPT
}

pub fn JSCLASS_HAS_RESERVED_SLOTS(n: c_uint) -> c_uint {
    (n & JSCLASS_RESERVED_SLOTS_MASK) << JSCLASS_RESERVED_SLOTS_SHIFT
}

pub fn result(n: JSBool) -> Result<(),()> {
    if n != ERR {Ok(())} else {Err(())}
}
pub fn result_obj(o: jsobj) -> Result<jsobj, ()> {
    if o.ptr != null() {Ok(o)} else {Err(())}
}

#[inline(always)]
pub unsafe fn JS_ARGV(_cx: *JSContext, vp: *JSVal) -> *JSVal {
    ptr::offset(vp, 2)
}

pub unsafe fn JS_SET_RVAL(_cx: *JSContext, vp: *JSVal, v: JSVal) {
    let vp: *mut JSVal = cast::transmute(vp);
    *vp = v;
}

// FIXME This should be inline but fixed_stack_segment and inline are
// not currently compatible
//#[inline(always)]
#[fixed_stack_segment]
pub unsafe fn JS_THIS_OBJECT(cx: *JSContext, vp: *mut JSVal) -> *JSObject {
    let r = JSVAL_TO_OBJECT(
        if JSVAL_IS_PRIMITIVE(*ptr::offset(&*vp, 1)) {
            JS_ComputeThis(cx, &*vp)
        } else {
            *ptr::offset(&*vp, 1)
        });
    r
}

#[inline(always)]
pub unsafe fn JS_CALLEE(_cx: *JSContext, vp: *JSVal) -> *JSVal {
    vp
}

// This is a duplication of the shadow stuff from jsfriendapi.h.  Here
// there be dragons!
mod shadow {
    use std::libc;
    use std::ptr;
    use jsapi::{JSObject, JSClass, jsid, JSVal};

    struct TypeObject {
        proto: *JSObject
    }

    struct BaseShape {
        clasp: *JSClass,
        parent: *JSObject
    }

    struct Shape {
        base: *BaseShape,
        _1: jsid,
        slotInfo: u32
    }
    static FIXED_SLOTS_SHIFT: u32 = 27;

    pub struct Object {
        shape: *Shape,
        objType: *TypeObject,
        slots: *JSVal,
        _1: *JSVal,
    }

    impl Object {
        #[inline(always)]
        pub fn numFixedSlots(&self) -> libc::size_t {
            unsafe { ((*self.shape).slotInfo >> FIXED_SLOTS_SHIFT) as libc::size_t }
        }
        
        #[inline(always)]
        pub unsafe fn fixedSlots(&self) -> *JSVal {
            (ptr::offset(ptr::to_unsafe_ptr(&self), 1)) as *JSVal
        }

        // Like slotRef, but just returns the value, not a reference
        #[inline(always)]
        pub fn slotVal(&self, slot: libc::size_t) -> JSVal {
            unsafe {
                let nfixed : libc::size_t = self.numFixedSlots();
                if slot < nfixed {
                    return *ptr::offset(self.fixedSlots(), slot as int)
                }
                return *ptr::offset(self.slots, (slot - nfixed) as int)
            }
        }
    }
}

#[inline(always)]
pub unsafe fn GetReservedSlot(obj: *JSObject, slot: libc::size_t) -> JSVal {
    let s = obj as *shadow::Object;
    return (*s).slotVal(slot)
}
