VPATH=%VPATH%

CC ?= gcc
CXX ?= g++
CXXFLAGS ?=
AR ?= ar
RUSTC ?= rustc
RUSTFLAGS ?=

UNAME=$(shell uname)

ifeq ($(UNAME),Darwin)
    OSTYPE=darwin
endif
ifeq ($(UNAME),Linux)
    OSTYPE=linux
endif
ifeq ($(CFG_OSTYPE),linux-androideabi)
    OSTYPE=android
endif

MOZALLOC_CPP_SRC = \
	src/memory/mozalloc/mozalloc_abort.cpp \
	src/memory/mozalloc/mozalloc.cpp \
	src/memory/mozalloc/mozalloc_oom.cpp \
	$(NULL)

AZURE_CPP_SRC = \
	$(addprefix src/gfx/2d/,\
		Blur.cpp \
		DrawEventRecorder.cpp \
		DrawTargetRecording.cpp \
		Factory.cpp \
		ImageScaling.cpp \
		Matrix.cpp \
		PathRecording.cpp \
		RecordedEvent.cpp \
		Rect.cpp \
		Scale.cpp \
		ScaledFontBase.cpp \
		SourceSurfaceRawData.cpp \
		convolver.cpp \
		image_operations.cpp)

ifneq ($(CFG_CPUTYPE), arm)
    AZURE_CPP_SRC += $(addprefix src/gfx/2d/, ImageScalingSSE2.cpp)
endif
AZURE_CPP_SRC += azure-c.cpp

ifeq ($(CFG_ENABLE_DEBUG_SKIA),1)
CXXFLAGS += \
	-g \
	-DSK_DEBUG \
	-DGR_DEBUG=1 \
	-DGR_GL_LOG_CALLS=1 \
	-DGR_GL_LOG_CALLS_START=1 \
	$(NULL)
else
CXXFLAGS += \
	-O3 \
	-DSK_RELEASE \
	-DGR_RELEASE=1 \
	$(NULL)
endif

#SSE2 instruction support required.
CXXFLAGS += \
	-fPIC \
	-I$(VPATH)/include \
	-I$(VPATH)/include/mozilla/gfx \
	-I$(VPATH)/include/mozilla/ipc/chromium/src \
	-I$(VPATH)/include/mozilla/xpcom/base \
	-I$(VPATH)/include/mozilla/xpcom/build \
	-I$(VPATH)/include/mozilla/xpcom/glue \
	-I$(VPATH)/include/mozilla/xpcom/string/public \
	-DMOZ_GFX \
	-DNS_ATTR_MALLOC="" -DNS_WARN_UNUSED_RESULT="" \
	$(NULL)

#SSE2 instruction support required.
ifneq ($(CFG_CPUTYPE), arm)
    CXXFLAGS += -msse2
endif

AZURE_CPP_SRC += \
	$(addprefix src/gfx/2d/,\
		DrawTargetSkia.cpp \
		PathSkia.cpp \
		SourceSurfaceSkia.cpp)

CXXFLAGS += \
	-iquote $(VPATH)/../../skia/skia/include/core \
	-iquote $(VPATH)/../../skia/skia/include/config \
	-iquote $(VPATH)/../../skia/skia/include/effects \
	-iquote $(VPATH)/../../skia/skia/include/ports \
	-iquote $(VPATH)/../../skia/skia/include/utils \
	-iquote $(VPATH)/../../skia/skia/include/gpu \
	-iquote $(VPATH)/../../skia/skia/include/gpu/gl \
	-DUSE_SKIA \
	-DUSE_SKIA_GPU \
	$(NULL)

USE_CLANG = $(shell $(CXX) --version|grep -c 'clang')

ifeq ($(USE_CLANG),1)
    CXXFLAGS += -Wno-c++11-extensions
endif

ifeq ($(OSTYPE),darwin)
CXXFLAGS += \
	-DXP_MACOSX \
	-DXP_UNIX \
	-DMALLOC_H="<malloc/malloc.h>" \
	-I$(VPATH)/include/mozilla/gfx/gl \
	$(NULL)

AZURE_CPP_SRC += \
	src/gfx/2d/ScaledFontMac.cpp \
	src/gfx/2d/DrawTargetCG.cpp \
	src/gfx/2d/PathCG.cpp \
	src/gfx/2d/SourceSurfaceCG.cpp \
	$(NULL)

AZURE_OBJCPP_SRC = src/gfx/2d/QuartzSupport.mm
endif

ifeq ($(OSTYPE),linux)
CXXFLAGS += \
	-DXP_UNIX \
	$(NULL)
AZURE_OBJCPP_SRC =

CXXFLAGS += -DMOZ_ENABLE_FREETYPE
AZURE_CPP_SRC += \
	$(addprefix src/gfx/2d/,\
		ScaledFontFreetype.cpp)
endif

ifeq ($(OSTYPE),android)
    CXXFLAGS += \
    -DXP_UNIX \
    -DSK_BUILD_FOR_ANDROID \
    $(NULL)
    AZURE_OBJCPP_SRC =

    CXXFLAGS += -DMOZ_ENABLE_FREETYPE
    AZURE_CPP_SRC += \
        $(addprefix src/gfx/2d/,\
            ScaledFontFreetype.cpp)
endif

ALL_CPP_SRC = $(MOZALLOC_CPP_SRC) $(AZURE_CPP_SRC)
ALL_OBJCPP_SRC = $(AZURE_OBJCPP_SRC)
ALL_OBJS = $(ALL_CPP_SRC:%.cpp=%.o) $(ALL_OBJCPP_SRC:%.mm=%.o)

RUST_SRC=$(shell find $(VPATH)/. -type f -name '*.rs')

.PHONY: all
all: libazure.dummy

%.o: %.cpp
	$(CXX) $< -o $@ -c $(CXXFLAGS)

%.o: %.mm
	$(CXX) -ObjC++ $< -o $@ -c $(CXXFLAGS)

libazure.dummy: azure.rc $(RUST_SRC) libazure.a
	$(RUSTC) $(RUSTFLAGS) $< --out-dir .
	touch $@

azure-test: azure.rc $(RUST_SRC) libazure.a
	$(RUSTC) $(RUSTFLAGS) $< -o $@ --test

libazure.a: $(ALL_OBJS)
	$(AR) rcs libazure.a $(ALL_OBJS)

.PHONY: check
check: azure-test
	./azure-test

.PHONY: clean
clean:
	rm -f azure-test *.o *.a */*/*.o */*/*/*.o *.so *.dylib *.dll *.dummy
